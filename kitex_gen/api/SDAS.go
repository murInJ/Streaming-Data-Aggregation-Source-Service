// Code generated by thriftgo (0.3.8). DO NOT EDIT.

package api

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/cloudwego/kitex/pkg/streaming"
)

type SDAS interface {
	AddSource(ctx context.Context, req *AddSourceRequest) (r *AddSourceResponse, err error)

	RemoveSource(ctx context.Context, req *RemoveSourceRequest) (r *RemoveSourceResponse, err error)

	ListSources(ctx context.Context) (r *ListSourcesResponse, err error)

	ListExposes(ctx context.Context) (r *ListExposesResponse, err error)

	PullExposeStream(stream SDAS_PullExposeStreamServer) (err error)
}

type SDASClient struct {
	c thrift.TClient
}

func NewSDASClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SDASClient {
	return &SDASClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewSDASClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SDASClient {
	return &SDASClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewSDASClient(c thrift.TClient) *SDASClient {
	return &SDASClient{
		c: c,
	}
}

func (p *SDASClient) Client_() thrift.TClient {
	return p.c
}

func (p *SDASClient) AddSource(ctx context.Context, req *AddSourceRequest) (r *AddSourceResponse, err error) {
	var _args SDASAddSourceArgs
	_args.Req = req
	var _result SDASAddSourceResult
	if err = p.Client_().Call(ctx, "AddSource", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SDASClient) RemoveSource(ctx context.Context, req *RemoveSourceRequest) (r *RemoveSourceResponse, err error) {
	var _args SDASRemoveSourceArgs
	_args.Req = req
	var _result SDASRemoveSourceResult
	if err = p.Client_().Call(ctx, "RemoveSource", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SDASClient) ListSources(ctx context.Context) (r *ListSourcesResponse, err error) {
	var _args SDASListSourcesArgs
	var _result SDASListSourcesResult
	if err = p.Client_().Call(ctx, "ListSources", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SDASClient) ListExposes(ctx context.Context) (r *ListExposesResponse, err error) {
	var _args SDASListExposesArgs
	var _result SDASListExposesResult
	if err = p.Client_().Call(ctx, "ListExposes", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SDASClient) PullExposeStream(stream SDAS_PullExposeStreamServer) (err error) {
	panic("streaming method SDAS.PullExposeStream(mode = bidirectional) not available, please use Kitex Thrift Streaming Client.")
}

type SDAS_PullExposeStreamServer interface {
	streaming.Stream

	Recv() (*PullExposeStreamRequest, error)

	Send(*PullExposeStreamResponse) error
}

type SDASProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      SDAS
}

func (p *SDASProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *SDASProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *SDASProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewSDASProcessor(handler SDAS) *SDASProcessor {
	self := &SDASProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("AddSource", &sDASProcessorAddSource{handler: handler})
	self.AddToProcessorMap("RemoveSource", &sDASProcessorRemoveSource{handler: handler})
	self.AddToProcessorMap("ListSources", &sDASProcessorListSources{handler: handler})
	self.AddToProcessorMap("ListExposes", &sDASProcessorListExposes{handler: handler})
	self.AddToProcessorMap("PullExposeStream", &sDASProcessorPullExposeStream{handler: handler})
	return self
}
func (p *SDASProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type sDASProcessorAddSource struct {
	handler SDAS
}

func (p *sDASProcessorAddSource) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SDASAddSourceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddSource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SDASAddSourceResult{}
	var retval *AddSourceResponse
	if retval, err2 = p.handler.AddSource(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddSource: "+err2.Error())
		oprot.WriteMessageBegin("AddSource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddSource", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sDASProcessorRemoveSource struct {
	handler SDAS
}

func (p *sDASProcessorRemoveSource) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SDASRemoveSourceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RemoveSource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SDASRemoveSourceResult{}
	var retval *RemoveSourceResponse
	if retval, err2 = p.handler.RemoveSource(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RemoveSource: "+err2.Error())
		oprot.WriteMessageBegin("RemoveSource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RemoveSource", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sDASProcessorListSources struct {
	handler SDAS
}

func (p *sDASProcessorListSources) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SDASListSourcesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListSources", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SDASListSourcesResult{}
	var retval *ListSourcesResponse
	if retval, err2 = p.handler.ListSources(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListSources: "+err2.Error())
		oprot.WriteMessageBegin("ListSources", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListSources", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sDASProcessorListExposes struct {
	handler SDAS
}

func (p *sDASProcessorListExposes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SDASListExposesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListExposes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SDASListExposesResult{}
	var retval *ListExposesResponse
	if retval, err2 = p.handler.ListExposes(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListExposes: "+err2.Error())
		oprot.WriteMessageBegin("ListExposes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListExposes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sDASProcessorPullExposeStream struct {
	handler SDAS
}

func (p *sDASProcessorPullExposeStream) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	panic("streaming method SDAS.PullExposeStream(mode = bidirectional) not available, please use Kitex Thrift Streaming Client.")
}

type SDASAddSourceArgs struct {
	Req *AddSourceRequest `thrift:"req,1" frugal:"1,default,AddSourceRequest" json:"req"`
}

func NewSDASAddSourceArgs() *SDASAddSourceArgs {
	return &SDASAddSourceArgs{}
}

func (p *SDASAddSourceArgs) InitDefault() {
	*p = SDASAddSourceArgs{}
}

var SDASAddSourceArgs_Req_DEFAULT *AddSourceRequest

func (p *SDASAddSourceArgs) GetReq() (v *AddSourceRequest) {
	if !p.IsSetReq() {
		return SDASAddSourceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SDASAddSourceArgs) SetReq(val *AddSourceRequest) {
	p.Req = val
}

var fieldIDToName_SDASAddSourceArgs = map[int16]string{
	1: "req",
}

func (p *SDASAddSourceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SDASAddSourceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SDASAddSourceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SDASAddSourceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewAddSourceRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SDASAddSourceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddSource_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SDASAddSourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SDASAddSourceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SDASAddSourceArgs(%+v)", *p)

}

func (p *SDASAddSourceArgs) DeepEqual(ano *SDASAddSourceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SDASAddSourceArgs) Field1DeepEqual(src *AddSourceRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SDASAddSourceResult struct {
	Success *AddSourceResponse `thrift:"success,0,optional" frugal:"0,optional,AddSourceResponse" json:"success,omitempty"`
}

func NewSDASAddSourceResult() *SDASAddSourceResult {
	return &SDASAddSourceResult{}
}

func (p *SDASAddSourceResult) InitDefault() {
	*p = SDASAddSourceResult{}
}

var SDASAddSourceResult_Success_DEFAULT *AddSourceResponse

func (p *SDASAddSourceResult) GetSuccess() (v *AddSourceResponse) {
	if !p.IsSetSuccess() {
		return SDASAddSourceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SDASAddSourceResult) SetSuccess(x interface{}) {
	p.Success = x.(*AddSourceResponse)
}

var fieldIDToName_SDASAddSourceResult = map[int16]string{
	0: "success",
}

func (p *SDASAddSourceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SDASAddSourceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SDASAddSourceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SDASAddSourceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewAddSourceResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SDASAddSourceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddSource_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SDASAddSourceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SDASAddSourceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SDASAddSourceResult(%+v)", *p)

}

func (p *SDASAddSourceResult) DeepEqual(ano *SDASAddSourceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SDASAddSourceResult) Field0DeepEqual(src *AddSourceResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type SDASRemoveSourceArgs struct {
	Req *RemoveSourceRequest `thrift:"req,1" frugal:"1,default,RemoveSourceRequest" json:"req"`
}

func NewSDASRemoveSourceArgs() *SDASRemoveSourceArgs {
	return &SDASRemoveSourceArgs{}
}

func (p *SDASRemoveSourceArgs) InitDefault() {
	*p = SDASRemoveSourceArgs{}
}

var SDASRemoveSourceArgs_Req_DEFAULT *RemoveSourceRequest

func (p *SDASRemoveSourceArgs) GetReq() (v *RemoveSourceRequest) {
	if !p.IsSetReq() {
		return SDASRemoveSourceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SDASRemoveSourceArgs) SetReq(val *RemoveSourceRequest) {
	p.Req = val
}

var fieldIDToName_SDASRemoveSourceArgs = map[int16]string{
	1: "req",
}

func (p *SDASRemoveSourceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SDASRemoveSourceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SDASRemoveSourceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SDASRemoveSourceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewRemoveSourceRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SDASRemoveSourceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RemoveSource_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SDASRemoveSourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SDASRemoveSourceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SDASRemoveSourceArgs(%+v)", *p)

}

func (p *SDASRemoveSourceArgs) DeepEqual(ano *SDASRemoveSourceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SDASRemoveSourceArgs) Field1DeepEqual(src *RemoveSourceRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SDASRemoveSourceResult struct {
	Success *RemoveSourceResponse `thrift:"success,0,optional" frugal:"0,optional,RemoveSourceResponse" json:"success,omitempty"`
}

func NewSDASRemoveSourceResult() *SDASRemoveSourceResult {
	return &SDASRemoveSourceResult{}
}

func (p *SDASRemoveSourceResult) InitDefault() {
	*p = SDASRemoveSourceResult{}
}

var SDASRemoveSourceResult_Success_DEFAULT *RemoveSourceResponse

func (p *SDASRemoveSourceResult) GetSuccess() (v *RemoveSourceResponse) {
	if !p.IsSetSuccess() {
		return SDASRemoveSourceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SDASRemoveSourceResult) SetSuccess(x interface{}) {
	p.Success = x.(*RemoveSourceResponse)
}

var fieldIDToName_SDASRemoveSourceResult = map[int16]string{
	0: "success",
}

func (p *SDASRemoveSourceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SDASRemoveSourceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SDASRemoveSourceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SDASRemoveSourceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewRemoveSourceResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SDASRemoveSourceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RemoveSource_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SDASRemoveSourceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SDASRemoveSourceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SDASRemoveSourceResult(%+v)", *p)

}

func (p *SDASRemoveSourceResult) DeepEqual(ano *SDASRemoveSourceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SDASRemoveSourceResult) Field0DeepEqual(src *RemoveSourceResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type SDASListSourcesArgs struct {
}

func NewSDASListSourcesArgs() *SDASListSourcesArgs {
	return &SDASListSourcesArgs{}
}

func (p *SDASListSourcesArgs) InitDefault() {
	*p = SDASListSourcesArgs{}
}

var fieldIDToName_SDASListSourcesArgs = map[int16]string{}

func (p *SDASListSourcesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SDASListSourcesArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("ListSources_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SDASListSourcesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SDASListSourcesArgs(%+v)", *p)

}

func (p *SDASListSourcesArgs) DeepEqual(ano *SDASListSourcesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type SDASListSourcesResult struct {
	Success *ListSourcesResponse `thrift:"success,0,optional" frugal:"0,optional,ListSourcesResponse" json:"success,omitempty"`
}

func NewSDASListSourcesResult() *SDASListSourcesResult {
	return &SDASListSourcesResult{}
}

func (p *SDASListSourcesResult) InitDefault() {
	*p = SDASListSourcesResult{}
}

var SDASListSourcesResult_Success_DEFAULT *ListSourcesResponse

func (p *SDASListSourcesResult) GetSuccess() (v *ListSourcesResponse) {
	if !p.IsSetSuccess() {
		return SDASListSourcesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SDASListSourcesResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListSourcesResponse)
}

var fieldIDToName_SDASListSourcesResult = map[int16]string{
	0: "success",
}

func (p *SDASListSourcesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SDASListSourcesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SDASListSourcesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SDASListSourcesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListSourcesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SDASListSourcesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSources_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SDASListSourcesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SDASListSourcesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SDASListSourcesResult(%+v)", *p)

}

func (p *SDASListSourcesResult) DeepEqual(ano *SDASListSourcesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SDASListSourcesResult) Field0DeepEqual(src *ListSourcesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type SDASListExposesArgs struct {
}

func NewSDASListExposesArgs() *SDASListExposesArgs {
	return &SDASListExposesArgs{}
}

func (p *SDASListExposesArgs) InitDefault() {
	*p = SDASListExposesArgs{}
}

var fieldIDToName_SDASListExposesArgs = map[int16]string{}

func (p *SDASListExposesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SDASListExposesArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("ListExposes_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SDASListExposesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SDASListExposesArgs(%+v)", *p)

}

func (p *SDASListExposesArgs) DeepEqual(ano *SDASListExposesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type SDASListExposesResult struct {
	Success *ListExposesResponse `thrift:"success,0,optional" frugal:"0,optional,ListExposesResponse" json:"success,omitempty"`
}

func NewSDASListExposesResult() *SDASListExposesResult {
	return &SDASListExposesResult{}
}

func (p *SDASListExposesResult) InitDefault() {
	*p = SDASListExposesResult{}
}

var SDASListExposesResult_Success_DEFAULT *ListExposesResponse

func (p *SDASListExposesResult) GetSuccess() (v *ListExposesResponse) {
	if !p.IsSetSuccess() {
		return SDASListExposesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SDASListExposesResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListExposesResponse)
}

var fieldIDToName_SDASListExposesResult = map[int16]string{
	0: "success",
}

func (p *SDASListExposesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SDASListExposesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SDASListExposesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SDASListExposesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListExposesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SDASListExposesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListExposes_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SDASListExposesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SDASListExposesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SDASListExposesResult(%+v)", *p)

}

func (p *SDASListExposesResult) DeepEqual(ano *SDASListExposesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SDASListExposesResult) Field0DeepEqual(src *ListExposesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type SDASPullExposeStreamArgs struct {
	Req *PullExposeStreamRequest `thrift:"req,1" frugal:"1,default,PullExposeStreamRequest" json:"req"`
}

func NewSDASPullExposeStreamArgs() *SDASPullExposeStreamArgs {
	return &SDASPullExposeStreamArgs{}
}

func (p *SDASPullExposeStreamArgs) InitDefault() {
	*p = SDASPullExposeStreamArgs{}
}

var SDASPullExposeStreamArgs_Req_DEFAULT *PullExposeStreamRequest

func (p *SDASPullExposeStreamArgs) GetReq() (v *PullExposeStreamRequest) {
	if !p.IsSetReq() {
		return SDASPullExposeStreamArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SDASPullExposeStreamArgs) SetReq(val *PullExposeStreamRequest) {
	p.Req = val
}

var fieldIDToName_SDASPullExposeStreamArgs = map[int16]string{
	1: "req",
}

func (p *SDASPullExposeStreamArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SDASPullExposeStreamArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SDASPullExposeStreamArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SDASPullExposeStreamArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewPullExposeStreamRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SDASPullExposeStreamArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PullExposeStream_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SDASPullExposeStreamArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SDASPullExposeStreamArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SDASPullExposeStreamArgs(%+v)", *p)

}

func (p *SDASPullExposeStreamArgs) DeepEqual(ano *SDASPullExposeStreamArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SDASPullExposeStreamArgs) Field1DeepEqual(src *PullExposeStreamRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SDASPullExposeStreamResult struct {
	Success *PullExposeStreamResponse `thrift:"success,0,optional" frugal:"0,optional,PullExposeStreamResponse" json:"success,omitempty"`
}

func NewSDASPullExposeStreamResult() *SDASPullExposeStreamResult {
	return &SDASPullExposeStreamResult{}
}

func (p *SDASPullExposeStreamResult) InitDefault() {
	*p = SDASPullExposeStreamResult{}
}

var SDASPullExposeStreamResult_Success_DEFAULT *PullExposeStreamResponse

func (p *SDASPullExposeStreamResult) GetSuccess() (v *PullExposeStreamResponse) {
	if !p.IsSetSuccess() {
		return SDASPullExposeStreamResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SDASPullExposeStreamResult) SetSuccess(x interface{}) {
	p.Success = x.(*PullExposeStreamResponse)
}

var fieldIDToName_SDASPullExposeStreamResult = map[int16]string{
	0: "success",
}

func (p *SDASPullExposeStreamResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SDASPullExposeStreamResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SDASPullExposeStreamResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SDASPullExposeStreamResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewPullExposeStreamResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SDASPullExposeStreamResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PullExposeStream_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SDASPullExposeStreamResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SDASPullExposeStreamResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SDASPullExposeStreamResult(%+v)", *p)

}

func (p *SDASPullExposeStreamResult) DeepEqual(ano *SDASPullExposeStreamResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SDASPullExposeStreamResult) Field0DeepEqual(src *PullExposeStreamResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
