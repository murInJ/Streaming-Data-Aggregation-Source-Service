// Code generated by Kitex v0.9.1. DO NOT EDIT.

package sdas

import (
	api "SDAS/kitex_gen/api"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	AddSource(ctx context.Context, req *api.AddSourceRequest, callOptions ...callopt.Option) (r *api.AddSourceResponse, err error)
	RemoveSource(ctx context.Context, req *api.RemoveSourceRequest, callOptions ...callopt.Option) (r *api.RemoveSourceResponse, err error)
	ListSources(ctx context.Context, callOptions ...callopt.Option) (r *api.ListSourcesResponse, err error)
	SetPipeline(ctx context.Context, req *api.SetPipelineRequest, callOptions ...callopt.Option) (r *api.SetPipelineResponse, err error)
	QueryPipeline(ctx context.Context, callOptions ...callopt.Option) (r *api.QueryPipelineResponse, err error)
	AddExpose(ctx context.Context, req *api.AddExposeRequest, callOptions ...callopt.Option) (r *api.AddExposeResponse, err error)
	RemoveExpose(ctx context.Context, req *api.RemoveExposeRequest, callOptions ...callopt.Option) (r *api.RemoveExposeResponse, err error)
	ListExposes(ctx context.Context, callOptions ...callopt.Option) (r *api.ListExposesResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kSDASClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kSDASClient struct {
	*kClient
}

func (p *kSDASClient) AddSource(ctx context.Context, req *api.AddSourceRequest, callOptions ...callopt.Option) (r *api.AddSourceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddSource(ctx, req)
}

func (p *kSDASClient) RemoveSource(ctx context.Context, req *api.RemoveSourceRequest, callOptions ...callopt.Option) (r *api.RemoveSourceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RemoveSource(ctx, req)
}

func (p *kSDASClient) ListSources(ctx context.Context, callOptions ...callopt.Option) (r *api.ListSourcesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListSources(ctx)
}

func (p *kSDASClient) SetPipeline(ctx context.Context, req *api.SetPipelineRequest, callOptions ...callopt.Option) (r *api.SetPipelineResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SetPipeline(ctx, req)
}

func (p *kSDASClient) QueryPipeline(ctx context.Context, callOptions ...callopt.Option) (r *api.QueryPipelineResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryPipeline(ctx)
}

func (p *kSDASClient) AddExpose(ctx context.Context, req *api.AddExposeRequest, callOptions ...callopt.Option) (r *api.AddExposeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddExpose(ctx, req)
}

func (p *kSDASClient) RemoveExpose(ctx context.Context, req *api.RemoveExposeRequest, callOptions ...callopt.Option) (r *api.RemoveExposeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RemoveExpose(ctx, req)
}

func (p *kSDASClient) ListExposes(ctx context.Context, callOptions ...callopt.Option) (r *api.ListExposesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListExposes(ctx)
}
