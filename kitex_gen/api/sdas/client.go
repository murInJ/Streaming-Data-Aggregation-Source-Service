// Code generated by Kitex v0.9.1. DO NOT EDIT.

package sdas

import (
	api "SDAS/kitex_gen/api"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/client/callopt/streamcall"
	"github.com/cloudwego/kitex/client/streamclient"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	transport "github.com/cloudwego/kitex/transport"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	AddSource(ctx context.Context, req *api.AddSourceRequest, callOptions ...callopt.Option) (r *api.AddSourceResponse, err error)
	RemoveSource(ctx context.Context, req *api.RemoveSourceRequest, callOptions ...callopt.Option) (r *api.RemoveSourceResponse, err error)
	ListSources(ctx context.Context, callOptions ...callopt.Option) (r *api.ListSourcesResponse, err error)
	AddPipeline(ctx context.Context, req *api.AddPipelineRequest, callOptions ...callopt.Option) (r *api.AddPipelineResponse, err error)
	RemovePipeline(ctx context.Context, req *api.RemovePipelineRequest, callOptions ...callopt.Option) (r *api.RemovePipelineResponse, err error)
	ListPipeline(ctx context.Context, callOptions ...callopt.Option) (r *api.ListPipelinesResponse, err error)
	AddExpose(ctx context.Context, req *api.AddExposeRequest, callOptions ...callopt.Option) (r *api.AddExposeResponse, err error)
	RemoveExpose(ctx context.Context, req *api.RemoveExposeRequest, callOptions ...callopt.Option) (r *api.RemoveExposeResponse, err error)
	ListExposes(ctx context.Context, callOptions ...callopt.Option) (r *api.ListExposesResponse, err error)
}

// StreamClient is designed to provide Interface for Streaming APIs.
type StreamClient interface {
	PullExposeStream(ctx context.Context, callOptions ...streamcall.Option) (stream SDAS_PullExposeStreamClient, err error)
}

type SDAS_PullExposeStreamClient interface {
	streaming.Stream
	Send(*api.PullExposeStreamRequest) error
	Recv() (*api.PullExposeStreamResponse, error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kSDASClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kSDASClient struct {
	*kClient
}

func (p *kSDASClient) AddSource(ctx context.Context, req *api.AddSourceRequest, callOptions ...callopt.Option) (r *api.AddSourceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddSource(ctx, req)
}

func (p *kSDASClient) RemoveSource(ctx context.Context, req *api.RemoveSourceRequest, callOptions ...callopt.Option) (r *api.RemoveSourceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RemoveSource(ctx, req)
}

func (p *kSDASClient) ListSources(ctx context.Context, callOptions ...callopt.Option) (r *api.ListSourcesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListSources(ctx)
}

func (p *kSDASClient) AddPipeline(ctx context.Context, req *api.AddPipelineRequest, callOptions ...callopt.Option) (r *api.AddPipelineResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddPipeline(ctx, req)
}

func (p *kSDASClient) RemovePipeline(ctx context.Context, req *api.RemovePipelineRequest, callOptions ...callopt.Option) (r *api.RemovePipelineResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RemovePipeline(ctx, req)
}

func (p *kSDASClient) ListPipeline(ctx context.Context, callOptions ...callopt.Option) (r *api.ListPipelinesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListPipeline(ctx)
}

func (p *kSDASClient) AddExpose(ctx context.Context, req *api.AddExposeRequest, callOptions ...callopt.Option) (r *api.AddExposeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddExpose(ctx, req)
}

func (p *kSDASClient) RemoveExpose(ctx context.Context, req *api.RemoveExposeRequest, callOptions ...callopt.Option) (r *api.RemoveExposeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RemoveExpose(ctx, req)
}

func (p *kSDASClient) ListExposes(ctx context.Context, callOptions ...callopt.Option) (r *api.ListExposesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListExposes(ctx)
}

// NewStreamClient creates a stream client for the service's streaming APIs defined in IDL.
func NewStreamClient(destService string, opts ...streamclient.Option) (StreamClient, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))
	options = append(options, client.WithTransportProtocol(transport.GRPC))
	options = append(options, streamclient.GetClientOptions(opts)...)

	kc, err := client.NewClient(serviceInfoForStreamClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kSDASStreamClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewStreamClient creates a stream client for the service's streaming APIs defined in IDL.
// It panics if any error occurs.
func MustNewStreamClient(destService string, opts ...streamclient.Option) StreamClient {
	kc, err := NewStreamClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kSDASStreamClient struct {
	*kClient
}

func (p *kSDASStreamClient) PullExposeStream(ctx context.Context, callOptions ...streamcall.Option) (stream SDAS_PullExposeStreamClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, streamcall.GetCallOptions(callOptions))
	return p.kClient.PullExposeStream(ctx)
}
