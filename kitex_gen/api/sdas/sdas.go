// Code generated by Kitex v0.9.1. DO NOT EDIT.

package sdas

import (
	api "SDAS/kitex_gen/api"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"AddSource": kitex.NewMethodInfo(
		addSourceHandler,
		newSDASAddSourceArgs,
		newSDASAddSourceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RemoveSource": kitex.NewMethodInfo(
		removeSourceHandler,
		newSDASRemoveSourceArgs,
		newSDASRemoveSourceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListSources": kitex.NewMethodInfo(
		listSourcesHandler,
		newSDASListSourcesArgs,
		newSDASListSourcesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SetPipeline": kitex.NewMethodInfo(
		setPipelineHandler,
		newSDASSetPipelineArgs,
		newSDASSetPipelineResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"QueryPipeline": kitex.NewMethodInfo(
		queryPipelineHandler,
		newSDASQueryPipelineArgs,
		newSDASQueryPipelineResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"AddExpose": kitex.NewMethodInfo(
		addExposeHandler,
		newSDASAddExposeArgs,
		newSDASAddExposeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RemoveExpose": kitex.NewMethodInfo(
		removeExposeHandler,
		newSDASRemoveExposeArgs,
		newSDASRemoveExposeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListExposes": kitex.NewMethodInfo(
		listExposesHandler,
		newSDASListExposesArgs,
		newSDASListExposesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	sDASServiceInfo                = NewServiceInfo()
	sDASServiceInfoForClient       = NewServiceInfoForClient()
	sDASServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return sDASServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return sDASServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return sDASServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "SDAS"
	handlerType := (*api.SDAS)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func addSourceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.SDASAddSourceArgs)
	realResult := result.(*api.SDASAddSourceResult)
	success, err := handler.(api.SDAS).AddSource(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSDASAddSourceArgs() interface{} {
	return api.NewSDASAddSourceArgs()
}

func newSDASAddSourceResult() interface{} {
	return api.NewSDASAddSourceResult()
}

func removeSourceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.SDASRemoveSourceArgs)
	realResult := result.(*api.SDASRemoveSourceResult)
	success, err := handler.(api.SDAS).RemoveSource(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSDASRemoveSourceArgs() interface{} {
	return api.NewSDASRemoveSourceArgs()
}

func newSDASRemoveSourceResult() interface{} {
	return api.NewSDASRemoveSourceResult()
}

func listSourcesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	_ = arg.(*api.SDASListSourcesArgs)
	realResult := result.(*api.SDASListSourcesResult)
	success, err := handler.(api.SDAS).ListSources(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSDASListSourcesArgs() interface{} {
	return api.NewSDASListSourcesArgs()
}

func newSDASListSourcesResult() interface{} {
	return api.NewSDASListSourcesResult()
}

func setPipelineHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.SDASSetPipelineArgs)
	realResult := result.(*api.SDASSetPipelineResult)
	success, err := handler.(api.SDAS).SetPipeline(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSDASSetPipelineArgs() interface{} {
	return api.NewSDASSetPipelineArgs()
}

func newSDASSetPipelineResult() interface{} {
	return api.NewSDASSetPipelineResult()
}

func queryPipelineHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	_ = arg.(*api.SDASQueryPipelineArgs)
	realResult := result.(*api.SDASQueryPipelineResult)
	success, err := handler.(api.SDAS).QueryPipeline(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSDASQueryPipelineArgs() interface{} {
	return api.NewSDASQueryPipelineArgs()
}

func newSDASQueryPipelineResult() interface{} {
	return api.NewSDASQueryPipelineResult()
}

func addExposeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.SDASAddExposeArgs)
	realResult := result.(*api.SDASAddExposeResult)
	success, err := handler.(api.SDAS).AddExpose(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSDASAddExposeArgs() interface{} {
	return api.NewSDASAddExposeArgs()
}

func newSDASAddExposeResult() interface{} {
	return api.NewSDASAddExposeResult()
}

func removeExposeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.SDASRemoveExposeArgs)
	realResult := result.(*api.SDASRemoveExposeResult)
	success, err := handler.(api.SDAS).RemoveExpose(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSDASRemoveExposeArgs() interface{} {
	return api.NewSDASRemoveExposeArgs()
}

func newSDASRemoveExposeResult() interface{} {
	return api.NewSDASRemoveExposeResult()
}

func listExposesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	_ = arg.(*api.SDASListExposesArgs)
	realResult := result.(*api.SDASListExposesResult)
	success, err := handler.(api.SDAS).ListExposes(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSDASListExposesArgs() interface{} {
	return api.NewSDASListExposesArgs()
}

func newSDASListExposesResult() interface{} {
	return api.NewSDASListExposesResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddSource(ctx context.Context, req *api.AddSourceRequest) (r *api.AddSourceResponse, err error) {
	var _args api.SDASAddSourceArgs
	_args.Req = req
	var _result api.SDASAddSourceResult
	if err = p.c.Call(ctx, "AddSource", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RemoveSource(ctx context.Context, req *api.RemoveSourceRequest) (r *api.RemoveSourceResponse, err error) {
	var _args api.SDASRemoveSourceArgs
	_args.Req = req
	var _result api.SDASRemoveSourceResult
	if err = p.c.Call(ctx, "RemoveSource", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListSources(ctx context.Context) (r *api.ListSourcesResponse, err error) {
	var _args api.SDASListSourcesArgs
	var _result api.SDASListSourcesResult
	if err = p.c.Call(ctx, "ListSources", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetPipeline(ctx context.Context, req *api.SetPipelineRequest) (r *api.SetPipelineResponse, err error) {
	var _args api.SDASSetPipelineArgs
	_args.Req = req
	var _result api.SDASSetPipelineResult
	if err = p.c.Call(ctx, "SetPipeline", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryPipeline(ctx context.Context) (r *api.QueryPipelineResponse, err error) {
	var _args api.SDASQueryPipelineArgs
	var _result api.SDASQueryPipelineResult
	if err = p.c.Call(ctx, "QueryPipeline", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddExpose(ctx context.Context, req *api.AddExposeRequest) (r *api.AddExposeResponse, err error) {
	var _args api.SDASAddExposeArgs
	_args.Req = req
	var _result api.SDASAddExposeResult
	if err = p.c.Call(ctx, "AddExpose", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RemoveExpose(ctx context.Context, req *api.RemoveExposeRequest) (r *api.RemoveExposeResponse, err error) {
	var _args api.SDASRemoveExposeArgs
	_args.Req = req
	var _result api.SDASRemoveExposeResult
	if err = p.c.Call(ctx, "RemoveExpose", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListExposes(ctx context.Context) (r *api.ListExposesResponse, err error) {
	var _args api.SDASListExposesArgs
	var _result api.SDASListExposesResult
	if err = p.c.Call(ctx, "ListExposes", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
